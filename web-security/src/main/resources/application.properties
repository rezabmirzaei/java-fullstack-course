
client-id=spring-web-security

# URI of the issuer (Identity Provider like Keycloak) that issued the JWT tokens.
# Used to validate the issuer of incoming JWT tokens.
# We will only accept tokens issued by this specified issuer.
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8083/realms/noroff

# URI of the JSON Web Key (JWK) Set.
# Contains the public keys used to verify the signatures of JWT tokens.
# We will use the keys from the JWK Set to verify the signatures of incoming JWT tokens.
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8083/realms/noroff/protocol/openid-connect/certs

# Cloud IAM - https://app.cloud-iam.com/
#spring.security.oauth2.resourceserver.jwt.issuer-uri=https://lemur-8.cloud-iam.com/auth/realms/noroff-test
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://lemur-8.cloud-iam.com/auth/realms/noroff-test/protocol/openid-connect/certs


# Keycloak login client
# spring.security.oauth2.client.provider.external.issuer-uri=http://localhost:8083/realms/noroff
# spring.security.oauth2.client.registration.external.provider=external
# spring.security.oauth2.client.registration.external.client-id=${client-id}
# spring.security.oauth2.client.registration.external.client-secret=DKHG1X2EeDo8uIgWfZC663KbcuvzpziY
# spring.security.oauth2.client.registration.external.scope=openid,offline_access,profile
# spring.security.oauth2.client.registration.external.authorization-grant-type=authorization_code
